(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{384:function(t,a,s){"use strict";s.r(a);var n=s(46),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"js骚操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js骚操作"}},[t._v("#")]),t._v(" JS骚操作")]),t._v(" "),s("p",[t._v("js中一些简化操作")]),t._v(" "),s("h3",{attrs:{id:"数组去重"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组去重"}},[t._v("#")]),t._v(" 数组去重")]),t._v(" "),s("p",[s("strong",[t._v("双重for循环去重")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("function unique(arr){\n    for(let i=0;i < arr.length; i++){\n        for(let j=i+1;j < arr.length;j++){\n            if(arr[i] === arr[j]){\n                arr[j].splice(j,1);\n                j--;\n            }\n        }\n    }\n    return arr\n}\n")])])]),s("p",[s("strong",[t._v("利用indexOf去重")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("function unique(arr){\n    let newArray = []\n    for(let i=0;i<arr.length;i++){\n        if( newArray.indexOf(arr[i]) === -1 ){\n            newArray.push(arr[i])\n        }\n    }\n    return newArray;\n}\n")])])]),s("p",[s("strong",[t._v("使用Array.from()和new Set()去重")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("function unique(arr){\n    return Array.from(new Set(arr));\n}\n")])])]),s("h3",{attrs:{id:"数组转为对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组转为对象"}},[t._v("#")]),t._v(" 数组转为对象")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('let arr = ["1","2","3"];\n/* 常见处理 */\nlet obj = {};\nfor (let key in arr) {\n    obj[key] = arr[key];\n}\n/* 精简类型 */\nlet obj = {...arrr}\n')])])]),s("h3",{attrs:{id:"类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型转换"}},[t._v("#")]),t._v(" 类型转换")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//string串转number")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("string\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//number转string")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("number"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nnumber"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nnumber "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),t._v("\n\n")])])]),s("h3",{attrs:{id:"性能追踪"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#性能追踪"}},[t._v("#")]),t._v(" 性能追踪")]),t._v(" "),s("p",[s("strong",[t._v("如果想测试一段代码的执行耗时，可以尝试使用performance")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("let start = performance.now();\nlet sum = 0;\nfor(let i=0;i<10000;i++){\n\tsum+=i;\n}\nlet end = performance.now();\nconsole.log(start)\nconsole.log(end)\n")])])]),s("h3",{attrs:{id:"对象合并"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象合并"}},[t._v("#")]),t._v(" 对象合并")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("let obj1 = {a:1}\nlet obj1 = {b:2}\n//assgin合并方法\nObject.assign(obj1,obj2)\n//展开操作符合并方法\nlet con = {...obj1,...obj2}\n")])])]),s("h3",{attrs:{id:"短路运算"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#短路运算"}},[t._v("#")]),t._v(" 短路运算")]),t._v(" "),s("p",[t._v("**我们可以通过  && 和 || 来简化我们的代码 **")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("if(ok){\n\tsearch();\n}\n\n//使用&&\nok && search();\n//使用||\nlet name = null || 'hellow'\n")])])]),s("h3",{attrs:{id:"数组扁平化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组扁平化"}},[t._v("#")]),t._v(" 数组扁平化")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("let arr = [1, [2, [3, 4]]];\n\n//递归实现\nfunction flatten(arr){\n\tif(Array.isArray(arr)){\n\t\treturn new Error('传入的值不是数组');\n\t}\n\tlet result = []; \n\tfor(let i=0;i<arr.length;i++){\n\t\tif(Array.isArray(arr[i])){\n\t\t\tresult = result.concat(flatten(arr[i]));\n\t\t}else{\n\t\t\tresult.push(arr[i])\n\t\t}\n\t}\n\treturn result;\n}\n\n//reduce方法实现\nfunction flatten(arr) {\n  return arr.reduce(function (prev, next) {\n    return prev.concat(Array.isArray(next) ? flatten(next) : next);\n  }, []);\n}\n\n//简易方法实现 flat(deep) deep是展开嵌套数组的深度\narr.flat(3)\n")])])]),s("h3",{attrs:{id:"求幂运算"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#求幂运算"}},[t._v("#")]),t._v(" 求幂运算")]),t._v(" "),s("p",[t._v("比如实现$2^{10}$，使用JS编写：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("//Math.pow(底数,幂数)\nlet num = Math.pow(2,10);\n//es7添加了指数运算符号 **\nlet num = 2 ** 10;\n")])])]),s("h3",{attrs:{id:"浮点数转整数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浮点数转整数"}},[t._v("#")]),t._v(" 浮点数转整数")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("Math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("floor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//向上取整，直接去掉所有的小数")]),t._v("\nMath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ceil")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//向下取整，只要是有小数就 +1")]),t._v("\nMath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("round")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//四舍五入")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//位运算符 ~~,>>,<<,| 都可以对负数取整   >>>不可对负数取整 都是实现Math.flooor()的功能")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6.95")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//6")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6.95")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//6")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6.95")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//6")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6.95")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//6")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6.95")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//6")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6.95")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//-7 实现了类似Math.ceil()的功能，但是会转成负数")]),t._v("\n\n")])])]),s("h3",{attrs:{id:"获取数组的最后一项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#获取数组的最后一项"}},[t._v("#")]),t._v(" 获取数组的最后一项")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("arr[arr.length - 1];\nlet last = arr.slice(-1)[0];\n")])])]),s("h3",{attrs:{id:"object-create-null-和"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-create-null-和"}},[t._v("#")]),t._v(" Object.create(null) 和 {}")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('//Object.create(proto,[propertiesObject]) proto是新创建对象的原型，propertiesObject是自身添加的可枚举的属性\nlet obj = Object.create(null,{\n\ta:{\n\t\twritable:true,\n\t\tconfigurable:true,\n\t\tvalue:"1"\n\t}\n})\n\n区别：\n通过{}创建的对象继承了Object自身的方法，如hasOwnProperty、toString等，在新对象上可以直接使用。\n\n而使用Object.create(null)创建的对象，除了自身属性a之外，原型链上没有任何属性。\n也就是我们可以通过Object.create(null)这种方式创建一个纯净的对象，我们可以自己定义hasOwnProperty、toString等方法，完全不必担心会将原型链上的同名方法覆盖掉。\n\n')])])]),s("h3",{attrs:{id:"数组拷贝"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组拷贝"}},[t._v("#")]),t._v(" 数组拷贝")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("let copyArr = arr.slice()\nlet copyArr = [...arr]\nlet copyArr = new Array(...arr)\nlet copyArr = arr.concat()\n\n")])])]),s("h3",{attrs:{id:"避免多条件并列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#避免多条件并列"}},[t._v("#")]),t._v(" 避免多条件并列")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("if (status === 'process' || status === 'wait' || status === 'fail') {\n  doSomething()\n}\n\n//switch case \nswitch(status) {\n  case 'process':\n  case 'wait':\n  case 'fail':\n    doSomething()\n}\n\n//includes\nconst enum = ['process', 'wait', 'fail']\nif (enum.includes(status)) {\n  doSomething()\n}\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);